#!/bin/bash

#SBATCH --time=168:00:00
#SBATCH --ntasks=1
#SBATCH --mem-per-cpu=20G
#SBATCH --mail-user=yohan.chatelain@gmail.com
#SBATCH --mail-type=ALL
#SBATCH --output=logs/run/%x.%A.%a.out
#SBATCH --error=logs/run/%x.%A.%a.err

ROOT_PATH=%%ROOT_PATH%%

module load singularity

read -r -d '' HELP <<EOM
usage: ./launch_fmriprep_fuzzy_anat_only.sh --dataset --participant --random-mode\n
\t --dataset=file         Name of the dataset\n
\t --participant=n        Participant identifier\n
\t --random-mode=mode     Random mode (rr,rs,rr.rs,ieee,seed)\n
\t                         * rr: Random Rounding (libm only), seed fixed to %%REFERENCE_SEED%%\n
\t                         * rs: Random Seed\n
\t                         * rr.rs: rr + rs\n
\t                         * ieee: Seed fixed to %%REFERENCE_SEED%%\n
\t                         * seed: Use seed from FMRIPREP_SEED environment variable\n
\t --template=tpl	  Template used for registration (default=MNI152NLin2009cAsym)\n
EOM

DEBUG=true
SUCCESS=0
FAILURE=1

function debug() {
    if $DEBUG; then
        echo >&2 "[DEBUG] " $*
    fi
}

function fail() {
    echo >&2 $*
    echo >&2 -e $HELP
    exit 1
}

function assert() {
    if [[ $(($1)) == 0 ]]; then
        fail "assert($1) failed at line $2"
    fi
}

function equal() {
    assert "$# == 2" $LINENO
    if [[ $1 == $2 ]]; then
        debug "${1} and ${2} are equal"
        return $SUCCESS
    else
        return $FAILURE
    fi
}

function not_equal() {
    assert "$# == 2" $LINENO
    if [[ $1 == $2 ]]; then
        return $FAILURE
    else
        debug "${1} and ${2} are not equal"
        return $SUCCESS
    fi
}

function less_than() {
    assert "$# == 2" $LINENO
    if [[ $1 < $2 ]]; then
        return $FAILURE
    else
        debug "${1} is greater or equal to ${2}"
        return $SUCCESS
    fi
}

function match_regex() {
    assert "$# == 2" $LINEO
    if ! [[ $1 =~ $2 ]]; then
        return $FAILURE
    else
        return $SUCCESS
    fi
}

function parse_arg() {
    assert "$# == 1" $LINENO
    local arg
    IFS="=" read -ra arg <<<"$1"
    echo "${arg[@]:1}" | tr -d '\r'
}

function is_random_mode() {
    assert "$# == 1" $LINENO
    local re='^(rr|rs|rr.rs|ieee|seed)'
    return $(match_regex "${1}" "${re}")
}

function get_random_seed() {
    case $1 in
    rr)
        LIBM_PRELOAD=''
        RANDOM_SEED='--random-seed=%%REFERENCE_SEED%%'
        ;;
    rs)
        # Replace the ld.so.preload to use native libm
        LIBM_PRELOAD='-B ld.so.preload:/etc/ld.so.preload'
        RANDOM_SEED=''
        ;;
    rr.rs)
        LIBM_PRELOAD=''
        RANDOM_SEED=''
        ;;
    ieee)
        # Replace the ld.so.preload to use native libm
        LIBM_PRELOAD='-B ld.so.preload:/etc/ld.so.preload'
        RANDOM_SEED='--random-seed=%%REFERENCE_SEED%%'
        ;;
    seed)
        # Replace the ld.so.preload to use native libm
        LIBM_PRELOAD='-B ld.so.preload:/etc/ld.so.preload'
        RANDOM_SEED='--random-seed=${FMRIPREP_SEED}'
        ;;
    *)
        fail "Unknown --random-mode=${1}"
        ;;
    esac
}

function parse_internal_args() {
    case $1 in
    --dataset=*)
        DATASET=$(parse_arg $1)
        debug "DATASET=$DATASET"
        ;;
    --participant=*)
        PARTICIPANT=$(parse_arg $1)
        debug "PARTICIPANT=$PARTICIPANT"
        ;;
    --random-mode=*)
        RANDOM_MODE=$(parse_arg $1)
        debug "RANDOM_MODE=$RANDOM_MODE"
        if (! is_random_mode ${RANDOM_MODE}); then
            fail "--random-mode='${RANDOM_MODE}' is not a valid random mode"
        fi
        ;;
    --template=*)
        TEMPLATE=$(parse_arg $1)
        debug "TEMPLATE=${TEMPLATE}"
        ;;
    --help)
        fail ""
        ;;
    *)
        fail "Unkown arg: ${1}"
        ;;
    esac
}

function set_environment() {
    SINGULARITY_WORKDIR=/workdir
    SINGULARITY_IMAGE_PATH=${ROOT_PATH}/envs/singularity-images/%%SIF_IMAGE%%
    INPUTS_PATH=${SINGULARITY_WORKDIR}/inputs/openneuro/${DATASET}
    OUTPUTS_PATH=${SINGULARITY_WORKDIR}/outputs/${RANDOM_MODE}/fmriprep_${DATASET}_${SLURM_ARRAY_JOB_ID}.${SLURM_ARRAY_TASK_ID}/
    TMP_WORKDIR=${SINGULARITY_WORKDIR}/fmriprep_work/fmriprep_${DATASET}_${PARTICIPANT}_${SLURM_ARRAY_JOB_ID}.${SLURM_ARRAY_TASK_ID}/

    get_random_seed ${RANDOM_MODE}
    touch ld.so.preload
    mkdir -p fmriprep_work/fmriprep_${DATASET}_${PARTICIPANT}_${SLURM_ARRAY_JOB_ID}.${SLURM_ARRAY_TASK_ID}/
    debug "SINGULARITY_WORKDIR=$SINGULARITY_WORKDIR"
    debug "SINGULARIY_IMAGE_PATH=$SINGULARITY_IMAGE_PATH"
    debug "INPUTS_PATH=$INPUTS_PATH"
    debug "OUTPUTS_PATH=$OUTPUTS_PATH"
    debug "TMP_WORKDIR=$TMP_WORKDIR"
    debug "RANDOM_SEED=$RANDOM_SEED"
    debug "RANDOM_MODE=$RANDOM_MODE"
}

function run() {
    debug "singularity run --pwd ${SINGULARITY_WORKDIR} -B ${PWD}:${SINGULARITY_WORKDIR} \
		-B /etc/pki/tls/certs/ca-bundle.crt:/etc/pki/tls/certs/ca-bundle.crt \
		-B ${ROOT_PATH}/inputs/:${SINGULARITY_WORKDIR}/inputs \
		${LIBM_PRELOAD} \
		${SINGULARITY_IMAGE_PATH} \
		--output-spaces ${TEMPLATE} \
		--work-dir ${TMP_WORKDIR} \
		--anat-only --notrack --write-graph --resource-monitor --omp-nthreads 1 --nprocs 1 --mem_mb 65536 \
		--participant-label ${PARTICIPANT} \
		${RANDOM_SEED} --skull-strip-fixed-seed --fs-license-file=/workdir/license.txt \
		${INPUTS_PATH} ${OUTPUTS_PATH} participant"

    singularity run --pwd ${SINGULARITY_WORKDIR} -B ${PWD}:${SINGULARITY_WORKDIR} \
        -B /etc/pki/tls/certs/ca-bundle.crt:/etc/pki/tls/certs/ca-bundle.crt \
        -B ${ROOT_PATH}/inputs/:${SINGULARITY_WORKDIR}/inputs \
        ${LIBM_PRELOAD} \
        ${SINGULARITY_IMAGE_PATH} \
        --output-spaces ${TEMPLATE} \
        --work-dir ${TMP_WORKDIR} \
        --anat-only --notrack --write-graph --resource-monitor --omp-nthreads 1 --nprocs 1 --mem_mb 65536 \
        --participant-label ${PARTICIPANT} \
        ${RANDOM_SEED} --skull-strip-fixed-seed --fs-license-file=/workdir/license.txt \
        ${INPUTS_PATH} ${OUTPUTS_PATH} participant
}

argc=$#
debug "${argc} args given"
if (not_equal $argc 3); then
    if (not_equal $argc 4); then
        fail "Expected 3 or 4 arguments, ${argc} given"
    fi
fi

i=1
for arg in "$@"; do
    parse_internal_args $arg
    debug "Arg ${i}: ${arg}"
    let i++
done

if [[ $TEMPLATE == "" ]]; then
    TEMPLATE=MNI152NLin2009cAsym
fi

set_environment
run
